/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmergencyAlert } from "./EmergencyAlert";
import { EmergencyAlertCountArgs } from "./EmergencyAlertCountArgs";
import { EmergencyAlertFindManyArgs } from "./EmergencyAlertFindManyArgs";
import { Query } from "../../query/base/Query";
import { EmergencyAlertFindUniqueArgs } from "./EmergencyAlertFindUniqueArgs";
import { CreateEmergencyAlertArgs } from "./CreateEmergencyAlertArgs";
import { UpdateEmergencyAlertArgs } from "./UpdateEmergencyAlertArgs";
import { DeleteEmergencyAlertArgs } from "./DeleteEmergencyAlertArgs";
import { User } from "../../user/base/User";
import { EmergencyAlertService } from "../emergencyAlert.service";
@graphql.Resolver(() => EmergencyAlert)
export class EmergencyAlertResolverBase {
  constructor(protected readonly service: EmergencyAlertService) {}

  async _emergencyAlertsMeta(
    @graphql.Args() args: EmergencyAlertCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmergencyAlert])
  async emergencyAlerts(
    @graphql.Args() args: EmergencyAlertFindManyArgs
  ): Promise<EmergencyAlert[]> {
    return this.service.emergencyAlerts(args);
  }

  @graphql.Query(() => EmergencyAlert, { nullable: true })
  async emergencyAlert(
    @graphql.Args() args: EmergencyAlertFindUniqueArgs
  ): Promise<EmergencyAlert | null> {
    const result = await this.service.emergencyAlert(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmergencyAlert)
  async createEmergencyAlert(
    @graphql.Args() args: CreateEmergencyAlertArgs
  ): Promise<EmergencyAlert> {
    return await this.service.createEmergencyAlert({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmergencyAlert)
  async updateEmergencyAlert(
    @graphql.Args() args: UpdateEmergencyAlertArgs
  ): Promise<EmergencyAlert | null> {
    try {
      return await this.service.updateEmergencyAlert({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmergencyAlert)
  async deleteEmergencyAlert(
    @graphql.Args() args: DeleteEmergencyAlertArgs
  ): Promise<EmergencyAlert | null> {
    try {
      return await this.service.deleteEmergencyAlert(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: EmergencyAlert
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
