/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmergencyAlertService } from "../emergencyAlert.service";
import { EmergencyAlertCreateInput } from "./EmergencyAlertCreateInput";
import { EmergencyAlert } from "./EmergencyAlert";
import { EmergencyAlertFindManyArgs } from "./EmergencyAlertFindManyArgs";
import { EmergencyAlertWhereUniqueInput } from "./EmergencyAlertWhereUniqueInput";
import { EmergencyAlertUpdateInput } from "./EmergencyAlertUpdateInput";

export class EmergencyAlertControllerBase {
  constructor(protected readonly service: EmergencyAlertService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmergencyAlert })
  async createEmergencyAlert(
    @common.Body() data: EmergencyAlertCreateInput
  ): Promise<EmergencyAlert> {
    return await this.service.createEmergencyAlert({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        alertType: true,
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmergencyAlert] })
  @ApiNestedQuery(EmergencyAlertFindManyArgs)
  async emergencyAlerts(
    @common.Req() request: Request
  ): Promise<EmergencyAlert[]> {
    const args = plainToClass(EmergencyAlertFindManyArgs, request.query);
    return this.service.emergencyAlerts({
      ...args,
      select: {
        alertType: true,
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmergencyAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async emergencyAlert(
    @common.Param() params: EmergencyAlertWhereUniqueInput
  ): Promise<EmergencyAlert | null> {
    const result = await this.service.emergencyAlert({
      where: params,
      select: {
        alertType: true,
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmergencyAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmergencyAlert(
    @common.Param() params: EmergencyAlertWhereUniqueInput,
    @common.Body() data: EmergencyAlertUpdateInput
  ): Promise<EmergencyAlert | null> {
    try {
      return await this.service.updateEmergencyAlert({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          alertType: true,
          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmergencyAlert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmergencyAlert(
    @common.Param() params: EmergencyAlertWhereUniqueInput
  ): Promise<EmergencyAlert | null> {
    try {
      return await this.service.deleteEmergencyAlert({
        where: params,
        select: {
          alertType: true,
          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
