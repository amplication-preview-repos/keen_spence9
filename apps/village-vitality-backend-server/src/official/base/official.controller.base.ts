/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OfficialService } from "../official.service";
import { OfficialCreateInput } from "./OfficialCreateInput";
import { Official } from "./Official";
import { OfficialFindManyArgs } from "./OfficialFindManyArgs";
import { OfficialWhereUniqueInput } from "./OfficialWhereUniqueInput";
import { OfficialUpdateInput } from "./OfficialUpdateInput";

export class OfficialControllerBase {
  constructor(protected readonly service: OfficialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Official })
  async createOfficial(
    @common.Body() data: OfficialCreateInput
  ): Promise<Official> {
    return await this.service.createOfficial({
      data: data,
      select: {
        contactNumber: true,
        createdAt: true,
        id: true,
        name: true,
        position: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Official] })
  @ApiNestedQuery(OfficialFindManyArgs)
  async officials(@common.Req() request: Request): Promise<Official[]> {
    const args = plainToClass(OfficialFindManyArgs, request.query);
    return this.service.officials({
      ...args,
      select: {
        contactNumber: true,
        createdAt: true,
        id: true,
        name: true,
        position: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Official })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async official(
    @common.Param() params: OfficialWhereUniqueInput
  ): Promise<Official | null> {
    const result = await this.service.official({
      where: params,
      select: {
        contactNumber: true,
        createdAt: true,
        id: true,
        name: true,
        position: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Official })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOfficial(
    @common.Param() params: OfficialWhereUniqueInput,
    @common.Body() data: OfficialUpdateInput
  ): Promise<Official | null> {
    try {
      return await this.service.updateOfficial({
        where: params,
        data: data,
        select: {
          contactNumber: true,
          createdAt: true,
          id: true,
          name: true,
          position: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Official })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOfficial(
    @common.Param() params: OfficialWhereUniqueInput
  ): Promise<Official | null> {
    try {
      return await this.service.deleteOfficial({
        where: params,
        select: {
          contactNumber: true,
          createdAt: true,
          id: true,
          name: true,
          position: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
