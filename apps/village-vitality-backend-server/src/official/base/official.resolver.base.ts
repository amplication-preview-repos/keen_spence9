/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Official } from "./Official";
import { OfficialCountArgs } from "./OfficialCountArgs";
import { OfficialFindManyArgs } from "./OfficialFindManyArgs";
import { Query } from "../../query/base/Query";
import { OfficialFindUniqueArgs } from "./OfficialFindUniqueArgs";
import { CreateOfficialArgs } from "./CreateOfficialArgs";
import { UpdateOfficialArgs } from "./UpdateOfficialArgs";
import { DeleteOfficialArgs } from "./DeleteOfficialArgs";
import { OfficialService } from "../official.service";
@graphql.Resolver(() => Official)
export class OfficialResolverBase {
  constructor(protected readonly service: OfficialService) {}

  async _officialsMeta(
    @graphql.Args() args: OfficialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Official])
  async officials(
    @graphql.Args() args: OfficialFindManyArgs
  ): Promise<Official[]> {
    return this.service.officials(args);
  }

  @graphql.Query(() => Official, { nullable: true })
  async official(
    @graphql.Args() args: OfficialFindUniqueArgs
  ): Promise<Official | null> {
    const result = await this.service.official(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Official)
  async createOfficial(
    @graphql.Args() args: CreateOfficialArgs
  ): Promise<Official> {
    return await this.service.createOfficial({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Official)
  async updateOfficial(
    @graphql.Args() args: UpdateOfficialArgs
  ): Promise<Official | null> {
    try {
      return await this.service.updateOfficial({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Official)
  async deleteOfficial(
    @graphql.Args() args: DeleteOfficialArgs
  ): Promise<Official | null> {
    try {
      return await this.service.deleteOfficial(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
