/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MarketPrice } from "./MarketPrice";
import { MarketPriceCountArgs } from "./MarketPriceCountArgs";
import { MarketPriceFindManyArgs } from "./MarketPriceFindManyArgs";
import { Query } from "../../query/base/Query";
import { MarketPriceFindUniqueArgs } from "./MarketPriceFindUniqueArgs";
import { CreateMarketPriceArgs } from "./CreateMarketPriceArgs";
import { UpdateMarketPriceArgs } from "./UpdateMarketPriceArgs";
import { DeleteMarketPriceArgs } from "./DeleteMarketPriceArgs";
import { MarketPriceService } from "../marketPrice.service";
@graphql.Resolver(() => MarketPrice)
export class MarketPriceResolverBase {
  constructor(protected readonly service: MarketPriceService) {}

  async _marketPricesMeta(
    @graphql.Args() args: MarketPriceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MarketPrice])
  async marketPrices(
    @graphql.Args() args: MarketPriceFindManyArgs
  ): Promise<MarketPrice[]> {
    return this.service.marketPrices(args);
  }

  @graphql.Query(() => MarketPrice, { nullable: true })
  async marketPrice(
    @graphql.Args() args: MarketPriceFindUniqueArgs
  ): Promise<MarketPrice | null> {
    const result = await this.service.marketPrice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MarketPrice)
  async createMarketPrice(
    @graphql.Args() args: CreateMarketPriceArgs
  ): Promise<MarketPrice> {
    return await this.service.createMarketPrice({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MarketPrice)
  async updateMarketPrice(
    @graphql.Args() args: UpdateMarketPriceArgs
  ): Promise<MarketPrice | null> {
    try {
      return await this.service.updateMarketPrice({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MarketPrice)
  async deleteMarketPrice(
    @graphql.Args() args: DeleteMarketPriceArgs
  ): Promise<MarketPrice | null> {
    try {
      return await this.service.deleteMarketPrice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
