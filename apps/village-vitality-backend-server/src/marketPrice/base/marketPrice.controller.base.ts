/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MarketPriceService } from "../marketPrice.service";
import { MarketPriceCreateInput } from "./MarketPriceCreateInput";
import { MarketPrice } from "./MarketPrice";
import { MarketPriceFindManyArgs } from "./MarketPriceFindManyArgs";
import { MarketPriceWhereUniqueInput } from "./MarketPriceWhereUniqueInput";
import { MarketPriceUpdateInput } from "./MarketPriceUpdateInput";

export class MarketPriceControllerBase {
  constructor(protected readonly service: MarketPriceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MarketPrice })
  async createMarketPrice(
    @common.Body() data: MarketPriceCreateInput
  ): Promise<MarketPrice> {
    return await this.service.createMarketPrice({
      data: data,
      select: {
        createdAt: true,
        crop: true,
        id: true,
        location: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MarketPrice] })
  @ApiNestedQuery(MarketPriceFindManyArgs)
  async marketPrices(@common.Req() request: Request): Promise<MarketPrice[]> {
    const args = plainToClass(MarketPriceFindManyArgs, request.query);
    return this.service.marketPrices({
      ...args,
      select: {
        createdAt: true,
        crop: true,
        id: true,
        location: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MarketPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async marketPrice(
    @common.Param() params: MarketPriceWhereUniqueInput
  ): Promise<MarketPrice | null> {
    const result = await this.service.marketPrice({
      where: params,
      select: {
        createdAt: true,
        crop: true,
        id: true,
        location: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MarketPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMarketPrice(
    @common.Param() params: MarketPriceWhereUniqueInput,
    @common.Body() data: MarketPriceUpdateInput
  ): Promise<MarketPrice | null> {
    try {
      return await this.service.updateMarketPrice({
        where: params,
        data: data,
        select: {
          createdAt: true,
          crop: true,
          id: true,
          location: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MarketPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMarketPrice(
    @common.Param() params: MarketPriceWhereUniqueInput
  ): Promise<MarketPrice | null> {
    try {
      return await this.service.deleteMarketPrice({
        where: params,
        select: {
          createdAt: true,
          crop: true,
          id: true,
          location: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
